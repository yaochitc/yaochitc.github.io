---
layout: post
title: 从heron看storm上存在的不足
description: heron发布也有一段时间了，这里结合论文做一个总结
category: blog
---

关注实时技术的话，应该都知道去年twitter发布的heron了。虽然并没有开源，但是根据已经发布的[论文][1]，也足以观其大略了。twitter作为storm研发公司（收购了backtype），对于它的理解应该是无出其右的。论文中提到的一些问题，的确也是切中要害，下面简单的总结一下。当然，论文是去年5月发布的，根据github的pr来看，目前部分存在的问题，其实在未来的版本中也即将解决:)

#storm的不足
## nimbus问题
### 单点
这里提到的单点，确切来说应该包含两个方面的问题：
1. 无ha （社区版本即将解决）
2. 一个节点同时负责整个集群的任务调度和异常检测

第一个问题不用多说，主要说说第二个问题。由于nimbus的设计，导致当集群和任务规模达到很大的规模时，一个nimbus进程就必须负责调度成千上万的进程。这时，诸如gc这样的问题会影响调度性能，从而影响整个集群的可靠性。

对于这个问题，heron的解决方案是，为每一个任务（topology）启动一个topology monitor进程，由它来负责调度任务内的新分配和失效的worker进程。由于这样的改进，原有的nimbus角色得到了很大的解放，更大规模的集群成为可能。当然，为每个任务分配一个app master其实并不新鲜，在这类系统中是广泛采用的一种做法（spark,gearpump, etc.）。

## task调度问题
个人认为这个部分的改进应该是heron对于storm的一系列改进的核心。我们都知道，storm中对于所有的task，会在worker进程中平均分布（实际上是一个排序算法），而这恰恰也是导致问题的产生：

### 不易调试
由于多个task共享一个worker进程，这些task会将日志输出到同一个日志文件中，而这为调试、发现问题造成了不便。

### 资源分配问题
由于多个不同处理（bolt）节点的task共享一个worker进程，导致资源分配容易产生浪费。我们不妨考虑如下这种情况：


在这种情况下，会造成内存的浪费。当运行的任务很多的时候，会对集群资源造成比较大的消耗。

针对这个问题，heron对

[Yaotc]:    http://yaotec.info  "Yaotc"
[1]:
